# src/statistics_page.py

import streamlit as st
import pandas as pd
from src.database_manager import DatabaseManager # Import DatabaseManager

# --- Kh·ªüi t·∫°o DatabaseManager (ch·ªâ m·ªôt l·∫ßn v√† ƒë∆∞·ª£c cache) ---
@st.cache_resource
def get_db_manager():
    return DatabaseManager()

db_manager = get_db_manager()

def statistics_page():
    st.title("üìä Th·ªëng k√™ V·∫≠t t∆∞ & H√≥a ch·∫•t")
    st.write("Xem th·ªëng k√™ v√† l·ªçc d·ªØ li·ªáu t·ªìn kho theo lo·∫°i, v·ªã tr√≠ ho·∫∑c tr·∫°ng th√°i theo d√µi.")

    if db_manager.inventory_data.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu t·ªìn kho ƒë·ªÉ hi·ªÉn th·ªã th·ªëng k√™.")
        return

    # L·∫•y danh s√°ch c√°c gi√° tr·ªã duy nh·∫•t cho c√°c b·ªô l·ªçc
    all_types = ['T·∫•t c·∫£'] + db_manager.inventory_data['type'].dropna().unique().tolist()
    all_locations = ['T·∫•t c·∫£'] + db_manager.get_all_locations() # S·ª≠ d·ª•ng h√†m c√≥ s·∫µn
    all_tracking_statuses_raw = db_manager.inventory_data['tracking'].dropna().unique().tolist()
    
    # Tr√≠ch xu·∫•t c√°c tr·∫°ng th√°i ch√≠nh t·ª´ c·ªôt tracking (tr∆∞·ªõc " - Note: ")
    unique_tracking_statuses = set()
    for status_entry in all_tracking_statuses_raw:
        main_status = status_entry.split(" - Note:")[0].strip()
        unique_tracking_statuses.add(main_status)
    all_tracking_statuses = ['T·∫•t c·∫£'] + sorted(list(unique_tracking_statuses))

    # B·ªô l·ªçc
    selected_type = st.selectbox("L·ªçc theo Lo·∫°i:", options=all_types)
    selected_location = st.selectbox("L·ªçc theo V·ªã tr√≠:", options=all_locations)
    selected_tracking = st.selectbox("L·ªçc theo Theo d√µi:", options=all_tracking_statuses)

    filtered_df = db_manager.inventory_data.copy()

    # √Åp d·ª•ng b·ªô l·ªçc
    if selected_type != 'T·∫•t c·∫£':
        filtered_df = filtered_df[filtered_df['type'] == selected_type]

    if selected_location != 'T·∫•t c·∫£':
        filtered_df = filtered_df[filtered_df['location'] == selected_location]

    if selected_tracking != 'T·∫•t c·∫£':
        # ƒê·ªëi v·ªõi tracking, c·∫ßn ki·ªÉm tra ph·∫ßn ƒë·∫ßu c·ªßa chu·ªói (tr∆∞·ªõc " - Note: ")
        filtered_df = filtered_df[
            filtered_df['tracking'].fillna('').apply(lambda x: x.split(" - Note:")[0].strip() == selected_tracking)
        ]

    st.markdown("---")
    st.subheader("K·∫øt qu·∫£ Th·ªëng k√™")

    if filtered_df.empty:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi c√°c ti√™u ch√≠ l·ªçc ƒë√£ ch·ªçn.")
    else:
        st.write(f"T√¨m th·∫•y **{len(filtered_df)}** m·ª•c ph√π h·ª£p:")
        
        # Hi·ªÉn th·ªã DataFrame
        st.dataframe(filtered_df[[
            'id', 'name', 'type', 'quantity', 'unit', 'location', 
            'status', 'tracking', 'description'
        ]])

        st.markdown("---")
        st.subheader("T·ªïng quan nhanh")

        # Th·ªëng k√™ s·ªë l∆∞·ª£ng theo lo·∫°i
        st.write("##### S·ªë l∆∞·ª£ng theo lo·∫°i:")
        type_counts = filtered_df['type'].value_counts().reset_index()
        type_counts.columns = ['Lo·∫°i', 'S·ªë l∆∞·ª£ng']
        st.table(type_counts)

        # Th·ªëng k√™ s·ªë l∆∞·ª£ng theo tr·∫°ng th√°i
        st.write("##### S·ªë l∆∞·ª£ng theo tr·∫°ng th√°i:")
        # C·∫ßn chu·∫©n h√≥a l·∫°i tr·∫°ng th√°i cho th·ªëng k√™ n·∫øu c·ªôt tracking ch·ª©a ghi ch√∫
        temp_status_col = filtered_df['tracking'].fillna('').apply(lambda x: x.split(" - Note:")[0].strip())
        status_counts = temp_status_col.value_counts().reset_index()
        status_counts.columns = ['Tr·∫°ng th√°i Theo d√µi', 'S·ªë l∆∞·ª£ng']
        st.table(status_counts)

        # T·ªïng s·ªë l∆∞·ª£ng v·∫≠t t∆∞/h√≥a ch·∫•t (n·∫øu c√≥ tr∆∞·ªùng s·ªë l∆∞·ª£ng v√† ƒë∆°n v·ªã)
        if 'quantity' in filtered_df.columns and 'unit' in filtered_df.columns:
            st.write("##### T·ªïng s·ªë l∆∞·ª£ng:")
            # Group by unit and sum quantities
            total_quantities = filtered_df.groupby('unit')['quantity'].sum().reset_index()
            total_quantities.columns = ['ƒê∆°n v·ªã', 'T·ªïng s·ªë l∆∞·ª£ng']
            st.table(total_quantities)