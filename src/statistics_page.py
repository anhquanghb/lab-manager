# src/statistics_page.py

import streamlit as st
import pandas as pd
from src.database_manager import DatabaseManager

# Kh·ªüi t·∫°o DatabaseManager (ch·ªâ m·ªôt l·∫ßn v√† ƒë∆∞·ª£c cache)
@st.cache_resource
def get_db_manager():
    return DatabaseManager()

db_manager = get_db_manager()

def statistics_page():
    st.title("üìä Th·ªëng k√™ V·∫≠t t∆∞ & H√≥a ch·∫•t")
    st.write("Xem th·ªëng k√™ v√† l·ªçc d·ªØ li·ªáu t·ªìn kho theo lo·∫°i, v·ªã tr√≠ ho·∫∑c tr·∫°ng th√°i theo d√µi.")

    if db_manager.inventory_data.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu t·ªìn kho ƒë·ªÉ hi·ªÉn th·ªã th·ªëng k√™.")
        return

    # L·∫•y danh s√°ch c√°c gi√° tr·ªã duy nh·∫•t t·ª´ file config.json
    all_types = db_manager.config_data.get('types', [])
    all_locations = db_manager.config_data.get('locations', [])
    all_purposes = db_manager.config_data.get('purposes', [])
    all_statuses = db_manager.config_data.get('statuses', [])
    all_tracking_statuses = db_manager.config_data.get('tracking_statuses', [])

    # B·ªï sung c√°c gi√° tr·ªã t·ª´ inventory_data n·∫øu ch√∫ng ch∆∞a c√≥ trong config
    all_types_from_data = db_manager.inventory_data['type'].fillna('').unique().tolist()
    all_types.extend([t for t in all_types_from_data if t not in all_types and t])
    all_locations_from_data = db_manager.inventory_data['location'].fillna('').unique().tolist()
    all_locations.extend([l for l in all_locations_from_data if l not in all_locations and l])

    # S·∫Øp x·∫øp v√† ƒë·∫∑t "T·∫•t c·∫£" v√† "Kh√¥ng r√µ" ·ªü ƒë·∫ßu
    def sort_options(options):
        if not options:
            return ["T·∫•t c·∫£"]
        special_values = [v for v in ["Kh√¥ng r√µ", "Kh√¥ng x√°c ƒë·ªãnh"] if v in options]
        other_values = sorted([v for v in options if v not in special_values and v.strip() != ""])
        return ["T·∫•t c·∫£"] + special_values + other_values

    # B·ªô l·ªçc
    selected_type = st.selectbox("L·ªçc theo Lo·∫°i:", options=sort_options(all_types))
    selected_location = st.selectbox("L·ªçc theo V·ªã tr√≠:", options=sort_options(all_locations))
    selected_purpose = st.selectbox("L·ªçc theo M·ª•c ƒë√≠ch:", options=sort_options(all_purposes))
    selected_status = st.selectbox("L·ªçc theo Tr·∫°ng th√°i ban ƒë·∫ßu:", options=sort_options(all_statuses))
    selected_tracking = st.selectbox("L·ªçc theo Tr·∫°ng th√°i theo d√µi:", options=sort_options(all_tracking_statuses))

    filtered_df = db_manager.inventory_data.copy()

    # √Åp d·ª•ng b·ªô l·ªçc
    if selected_type != 'T·∫•t c·∫£':
        filtered_df = filtered_df[filtered_df['type'] == selected_type]

    if selected_location != 'T·∫•t c·∫£':
        filtered_df = filtered_df[filtered_df['location'] == selected_location]

    if selected_purpose != 'T·∫•t c·∫£':
        filtered_df = filtered_df[filtered_df['purpose'] == selected_purpose]
        
    if selected_status != 'T·∫•t c·∫£':
        filtered_df = filtered_df[filtered_df['status'] == selected_status]

    if selected_tracking != 'T·∫•t c·∫£':
        filtered_df = filtered_df[
            filtered_df['tracking'].fillna('').apply(lambda x: x.split(" - Note:")[0].strip() == selected_tracking)
        ]

    st.markdown("---")
    st.subheader("K·∫øt qu·∫£ Th·ªëng k√™")

    if filtered_df.empty:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi c√°c ti√™u ch√≠ l·ªçc ƒë√£ ch·ªçn.")
    else:
        st.write(f"T√¨m th·∫•y **{len(filtered_df)}** m·ª•c ph√π h·ª£p:")
        
        st.dataframe(filtered_df[[
            'id', 'name', 'type', 'quantity', 'unit', 'location', 
            'status', 'tracking', 'note', 'description'
        ]])

        st.markdown("---")
        st.subheader("T·ªïng quan nhanh")

        st.write("##### S·ªë l∆∞·ª£ng theo lo·∫°i:")
        type_counts = filtered_df['type'].value_counts().reset_index()
        type_counts.columns = ['Lo·∫°i', 'S·ªë l∆∞·ª£ng']
        st.table(type_counts)

        st.write("##### S·ªë l∆∞·ª£ng theo tr·∫°ng th√°i theo d√µi:")
        temp_tracking_status_col = filtered_df['tracking'].fillna('').apply(lambda x: x.split(" - Note:")[0].strip())
        tracking_status_counts = temp_tracking_status_col.value_counts().reset_index()
        tracking_status_counts.columns = ['Tr·∫°ng th√°i Theo d√µi', 'S·ªë l∆∞·ª£ng']
        st.table(tracking_status_counts)

        st.write("##### S·ªë l∆∞·ª£ng theo v·ªã tr√≠:")
        location_counts = filtered_df['location'].value_counts().reset_index()
        location_counts.columns = ['V·ªã tr√≠', 'S·ªë l∆∞·ª£ng']
        st.table(location_counts)

        if 'quantity' in filtered_df.columns and 'unit' in filtered_df.columns:
            st.write("##### T·ªïng s·ªë l∆∞·ª£ng:")
            total_quantities = filtered_df.groupby('unit')['quantity'].sum().reset_index()
            total_quantities.columns = ['ƒê∆°n v·ªã', 'T·ªïng s·ªë l∆∞·ª£ng']
            st.table(total_quantities)